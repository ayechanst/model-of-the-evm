**Ethereum Protocol Learning Outline**

* 1. Broad Overview
** 1. What is it about?
- The topic is the EVM
- The layperson could not grasp the EVM fully in detail within a few hours, but it is not as complex as nuclear physics
- Someone would need to understand several different things to grasp it fully

** 2. How extensive is the subject?
There are several facets of the Ethereum Protocol
- Blockchains
- Ethereum
- Ether
- Smart Contracts

** 3. What acts as an appropriate starting point? 
Blockchains
* 2. Narrowing the Steps 
How many parts/levels can the EVM be deconstructed into?
** Deconstructing the topic of the Ethereum Protocol
*** The Ethereum Protocol (the blockchain level of things)
**** Blockchains
***** Hash Functions
***** Merkel Trees
summary: https://www.youtube.com/watch?v=3AcQyTs_Es4&t=223s
Allows light clients to verify if something is on chain with minimum information
Not just transactions get put in merkel trees, but also the state
****** Ethereum Merkel Tree Structure
Every block header contains 3 trees:
******* Transactions
******* State
The state of every account, balance, storage (static information)
******* Receipts
Logs and extra auditing information
***** Accounts
****** Two Types of Account Objects
1. Accounts controlled by private key
   - nonce
   - balance
A string used to sign transactions to verify the identity of the user
2. Accounts controlled by code
   - nonce
   - balance
   - code hash (code = empty string for private key controlled accounts)
   - storage trie root (entire set of storage for that account)
An address that transactions can be sent to
****** Contract Accounts
******* address
A 42 digit hexadecimal address made from the creator's address and the nonce
******* nonce (expand more on this later)
A counter that prevents replay accounts
******* balance
The number of wei owned by this address
******* code hash 
The EVM code fragments of the account
The code can only run if the account gets a message call
All code fragements are contained in the state database under their corresponding hashes
******* storage root (also expand more on this)
A 256-bit hash of the root node

***** Blocks
******* Proof-of-stake
1. validator nodes stake 32ETH as collateral against bad acting
2. every 12 seconds, a validator is selected to be a block proposer, where they bundle transactions into a block and execute them to determine a new 'state' of the EVM
3. other rexecutions and see if thier 'state' matches with the state of the block proposer
4. if there are conflicting blocks for the same slot, the one with more gas wins
******* Block Contents
******** slot (the slot the block belongs to)
******** proposer_index (the ID of the block proposer)
******** parent root (the hash of the previous block)
******** state root (root hash of the state object)
The merkel tree root?
******** body (an object containing several fields) => exapnd on this maybe

***** Transactions
Contain 7 sets of values
- Can only be initiated by human controlled accounts
****** nonce
Every transaction needs to have a unique incrementing nonce
****** gas price
****** start gas
****** to
The address of the account your sending to
****** value
The amount of eth being sent
****** data
Array of bytes readable by the contract code
****** v, r, s
***** Receipts 
Objects that get hashed into the Ethereum blockchain
Every transaction has a receipt
There are 3 sorts:
****** Intermediate state root
****** Cumulative gas used (total gas used for the whole block)
****** Logs
- Inteded to allow efficient light client access to event records
- Append only
- Cannot be visible by contracts
- They are hashed into that block and appear nowhere else
******* Topics (32 bytes)
***** Smart Contracts
**** The EVM
***** Stack
***** Memory
***** Storage
***** Environment Variables
***** Logs
***** Nodes
Every full node on the blockchain processes every transaction and stores the entire state
Its any instance of ethereum client software
more on nodes: https://ethereum.org/developers/docs/nodes-and-clients
****** Clients (a node must run 2 clients)
******* Execution Client
- listens to new transactions on the blockchain
- executes those transactions
- holds the latest state and database of all ethereum data
******* Consensus Client
- implements the proof-of-stake consensus algorithm to reach an agreement with the execution client
***** State
Is a data structure called a "Modified Merkel Patricia Tree"
***** Code Execution
****** Transactions
******* What happens during a transaction?
Every transaction specifies a TO address (unless its creating a contract) its sending to
Two things can happen when sending to a TO address:
1. Destination is an account controlled by code
   This means you are just moving ETH around
2. Destination is an account controlled by code
   This runs the code on that account (see next section)
******* Transaction Information
******** from
******** to
******** signature
******** nonce
******** value
******** input data
******** gas limit
******** maxPriorityFeePerGas
******** maxFeePerGas
******* Types of Transactions
******** Regular transactions
Sending eth from one account to another
******** Contract deployment
Sending a transaction without a "to" address indicating it is a contract deployment
******** Execution of a smart contract
A transaction that interacts with a smart contract, so the "to" address is the address of the smart contract
******* ABI
When you send a transaction, **function calls** get compiled to transaction data
******** Transaction data
- first 4 bytes are function ID
- next 32 bytes are the first argument
- next 32 bytes are the second argument
******* Transaction Lifecycle
1. A transaction hash is cryptographically generated (a hash of all the tx info)
2. Transaction is broadcasted and added to the pool of pending network transactions
3. A validator picks the transaction and adds it to the next block on the blockchain
4. The block containing the transaction is finalized and added to the block chain where it can never be modified again
****** Code
When code is ran it can do 3 things:
1. Send ETH to other contracts
2. Read/write to the contracts storage
3. Call (start execution in another smart contract)
***** Gas
**** Ethereum 
*** Object Oriented Programming
**** Solidity
***** Anatomy of a smart contract
https://ethereum.org/developers/docs/smart-contracts/anatomy
**** Compiling to byte code
**** Publish the byte code in a transaction going to the blockchain

** Combining theory and application
How is the Ethereum Protocol related to OOP?

* 3. Define Success
The reason for learning about the ethereum protocol is to understand concepts within it quicker, because there is a solid foundation.
You will have succeeded in this when you can explain how things are working within the EVM and in what order, and why.
- What
- Where
- When
- Why
  
* 4. Compiling Resources
https://ethereum.org/developers/docs/intro-to-ethereum










* 5. Create a Curriculum

